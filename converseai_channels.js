/**
 * @file converseai_providers.js
 * @author andrew.rapo@jibo.com
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status              = require('@converseai/plugins-sdk').Status;
const HttpResponse        = require('@converseai/plugins-sdk').Payloads.HttpResponse;
const ErrorResponse       = require('@converseai/plugins-sdk').Payloads.ErrorResponse;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* Messages
* -----------
* Please see documentation about different types of Messages.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// const TextMessage         = require('@converseai/plugins-sdk').Payloads.Channel.Async.Message.Text;
// const MediaMessage        = require('@converseai/plugins-sdk').Payloads.Channel.Async.Message.Media;
// const ConversationMessage = require('@converseai/plugins-sdk').Payloads.Channel.Async.Message.Conversation;
const Message = require('@converseai/plugins-sdk').Payloads.Channel.Sync.Message;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* Synchronous
* -----------
* If you are creating a synchronous channel unccomment these lines and comment
* or remove the Async objects below.
* Please see documentation on Synchronous vs Asynchronous channels.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
const InboundResponse     = require('@converseai/plugins-sdk').Payloads.Channel.Sync.InboundResponse;
const InboundOutput       = require('@converseai/plugins-sdk').Payloads.Channel.Sync.InboundOutput;
const OutboundResponse    = require('@converseai/plugins-sdk').Payloads.Channel.Sync.OutboundResponse;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* Asynchronous
* -----------
* If you are creating an asynchronous channel you can remove the lines above and
* use the objects below.
* Please see documentation on Synchronous vs Asynchronous channels.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// const InboundResponse     = require('@converseai/plugins-sdk').Payloads.Channel.Async.InboundResponse;
// const InboundOutput       = require('@converseai/plugins-sdk').Payloads.Channel.Async.InboundOutput;
// const OutboundResponse    = require('@converseai/plugins-sdk').Payloads.Channel.Async.OutboundResponse;

var onMessageInbound = function(app, body) {
// /**
//  * Registration parameters assigned to body.payload.registrationData.
//  * @example
//  * var regOne = body.payload.registrationData.regOne;
//  */
//
//  /** @type {InboundResponse} response The Converse AI response to respond with. */
//  var response = new InboundResponse();
//
//  /** @type {InboundOutput} output object to be added to the response. */
//  var output = new InboundOutput();
//
//  response.addOutput(output);
//
//  /*
//  * This will return a success status and response to the registration function.
//  * It is important to always call `app.send` with a status and a response when
//  * the method has finished computing and must always return the data to be
//  * stored on the provider.
//  */
//  app.send(Status.SUCCESS, response);

  console.log("onMessageInbound: " + JSON.stringify(body.payload));

  var response = new OutboundResponse();
  response.setHTTPResponse({
    headers: {
      "Content-Type": "application/json"
    },
    httpStatus: 200,
    body: "aok",
  });
  console.log("response: " + JSON.stringify(response));
  app.send(Status.SUCCESS, response);

  // var output = new InboundOutput();
  // var conversationMessage = new Message.Conversation();
  //
  // conversationMessage.setIntent("Pizza", true);
  // // conversationMessage.setEntityData(inboundIntent.entities);
  // output.setMessage(conversationMessage);
  // console.log("conversationMessage: " + JSON.stringify(conversationMessage));
  // var response = new InboundResponse();
  // response.addOutput(output);
  // console.log("response: " + JSON.stringify(response));
  // app.send(Status.SUCCESS, response);
}

var onMessageOutbound = function(app, body) {
 // /**
 //  * Registration parameters assigned to body.payload.registrationData
 //  * and Module parameters assigned to body.payload.moduleData.
 //  * @example
 //  * var regOne = body.payload.registrationData.regOne;
 //  * var modOne = body.payload.moduleData.modOne;
 //  */
 //
 //  /** @type {InboundResponse} response The Converse AI response to respond with. */
 //  var response = new OutboundResponse();
 //
 //  /*
 //  * This will return a success status and response to the registration function.
 //  * It is important to always call `app.send` with a status and a response when
 //  * the method has finished computing and must always return the data to be
 //  * stored on the provider.
 //  */
 //  app.send(Status.SUCCESS, response);

  var response = new OutboundResponse();
  response.setHTTPResponse({
  headers: {
      "Content-Type": "application/json"
      },
      httpStatus: 200,
      body: JSON.stringify(body.payload),
  });
  app.send(Status.SUCCESS, response);
}

module.exports = {
  onMessageInbound: onMessageInbound,
  onMessageOutbound: onMessageOutbound
}
